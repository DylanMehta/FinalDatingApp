@inject HttpClient _client

<EditForm Model="@match" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Accepted?:</label>
            <div>
                <InputCheckbox @bind-Value="@match.AcceptOrNot" class="form-control" />
                <ValidationMessage For="@(() => match.AcceptOrNot)" />
            </div>
        </div>
        <div class="form-group">
            <label>First User:</label>
            <div>
                <InputSelect @bind-Value="@match.FirstPersonId" class="form-control">
                    <option value="">--Select First User</option>
                    @if (Persons != null)
                    {
                        foreach (var person in Persons)
                        {
                            <option value="@person.Id">@person.FirstName - @person.LastName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => match.FirstPersonId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Second User:</label>
            <div>
                <InputSelect @bind-Value="@match.SecondPersonId" class="form-control">
                    <option value="">--Select Second User</option>
                    @if (Persons != null)
                    {
                        foreach (var person in Persons)
                        {
                            var check = true;
                            @if (!person.Id.Equals(match.FirstPersonId))
                            {
                                @if (Blocks != null)
                                {
                                    foreach (var block in Blocks)
                                    {
                                        @if (block.BlockedId.Equals(match.FirstPersonId))
                                        {
                                            @if (block.BlockerId.Equals(person.Id))
                                            {
                                                check = false;
                                            }
                                        }
                                    }
                                    @if (check == true)
                                    {
                                        <option value="@person.Id">@person.FirstName - @person.LastName</option>
                                    }
                                }
                                else
                                {
                                    <option value="@person.Id">@person.FirstName - @person.LastName</option>
                                }
                            }
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => match.SecondPersonId)" />
            </div>
        </div>
        @if (match.AcceptOrNot.Equals(false))
        {
            block.BlockerId = match.SecondPersonId;
            block.BlockedId = match.FirstPersonId;
        }
    </fieldset>
    @if (!Disabled)
    {
        @if (match.AcceptOrNot.Equals(false))
        {
            <button type="submit" class="btn-btn-success btn-block" @onclick="@blockcreate">
                @ButtonText
            </button>
        }
        else
        {
            <button type="submit" class="btn-btn-success btn-block" >
                @ButtonText
            </button>
        }
    }
    <BackToList Target="matchs" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Match match { get; set; }
    [Parameter] public String ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Person> Persons;
    private IList<Block> Blocks;
    Block block = new Block();

    protected async override Task OnInitializedAsync()
    {
        Persons = await _client.GetFromJsonAsync<List<Person>>($"{Endpoints.PersonsEndpoint}");
        Blocks = await _client.GetFromJsonAsync<List<Block>>($"{Endpoints.BlocksEndpoint}");
    }

    private void blockcreate()
    {
        _client.PostAsJsonAsync(Endpoints.BlocksEndpoint, block);
    }
}
