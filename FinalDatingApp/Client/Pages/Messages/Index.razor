@page "/messages/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3>Messages</h3>
<a href="/messages/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Message
</a>
<br />
<br />

@if (Messages == null)
{
    <div class="alert alert-info">Loading Messages...</div>
}
else
{
    <table class="table table-responsive" id="bookingsTable">
        <thead>
            <tr>
                <th>Message Id</th>
                <th>Text</th>
                <th>Match Persons</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Message in Messages)
            {
                <tr>
                    <td>@Message.Id</td>
                    <td>@Message.Text</td>
                    <td>@GetName(Message.Match.FirstPersonId), @GetName(Message.Match.SecondPersonId)</td>
                    <td>
                        <a href="/Bookings/view/@Message.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/Bookings/edit/@Message.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(Message.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Message> Messages;
    private List<Person> Persons;

    protected async override Task OnInitializedAsync()
    {
        Messages = await _client.GetFromJsonAsync<List<Message>>($"{Endpoints.MessagesEndpoint}");
        Persons = await _client.GetFromJsonAsync<List<Person>>($"{Endpoints.PersonsEndpoint}");
    }

    async Task Delete(int messageId)
    {
        var message = Messages.First(q => q.Id == messageId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you sure you want to delete?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.MessagesEndpoint}/{messageId}");
            await OnInitializedAsync();
        }
    }

    private String GetName(int id)
    {
        var name = Persons.First(q => q.Id == id);
        return name.FirstName + " " + name.LastName;
    }
}
