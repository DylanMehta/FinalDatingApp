@page "/messages/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3>Messages</h3>

@if (Messages == null)
{
    <div class="alert alert-info">Loading Messages...</div>
}
else
{ 
<table class="table table-responsive" id="bookingsTable">
    <thead>
        <tr>
            <th>Message Id</th>
            <th>Text</th>
            <th>Match Id</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var Message in Messages)
        {
            <tr>
                <td>@Message.Id</td>
                <td>@Message.Text</td>
                <td>@Message.MatchId</td>
                <td>
                    <a href="/Bookings/view/@Message.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/Bookings/edit/@Message.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(Message.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
}

@code {
    private List<Message> Messages;

    protected async override Task OnInitializedAsync()
    {
        Messages = await _client.GetFromJsonAsync<List<Message>>($"{Endpoints.MessagesEndpoint}");
    }

    async Task Delete(int messageId)
    {
        var message = Messages.First(q => q.Id == messageId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you sure you want to delete?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.MessagesEndpoint}/{messageId}");
            await OnInitializedAsync();
        }
    }
}
