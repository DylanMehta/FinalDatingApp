@inject HttpClient _client
<EditForm Model="@message" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Text:</label>
        <div>
            <InputText @bind-Value="@message.Text" class="form-control" />
            <ValidationMessage For="@(() => message.Text)" />
        </div>
    </div>
    <div class="form-group">
        <label>Match Persons:</label>
        <div>
            <InputSelect @bind-Value="@message.MatchId" class="form-control">
                <option value="">--Select Match Persons</option>
                @if (Matchs != null)
                {
                    foreach (var match in Matchs)
                    {
                        <option value="@match.Id">@match.FirstPerson.FirstName @match.FirstPerson.LastName, @match.SecondPerson.FirstName @match.SecondPerson.LastName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => message.MatchId)" />
        </div>
    </div>
    <button type="submit" class="btn-btn-success btn-block">
        @ButtonText
    </button>
</EditForm>


@code {
    [Parameter] public Message message { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Match> Matchs;

    protected async override Task OnInitializedAsync()
    {
        Matchs = await _client.GetFromJsonAsync<List<Match>>($"{Endpoints.MatchsEndpoint}");
    }


}
