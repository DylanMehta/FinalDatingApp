@inject HttpClient _client
<EditForm Model="@message" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Text:</label>
            <div>
                <InputText @bind-Value="@message.Text" class="form-control" />
                <ValidationMessage For="@(() => message.Text)" />
            </div>
        </div>
        <div class="form-group">
            <label>Match Persons:</label>
            <div>
                <InputSelect @bind-Value="@message.MatchId" class="form-control">
                    <option value="">--Select Match Persons</option>
                    @if (Matchs != null)
                    {
                        foreach (var match in Matchs)
                        {
                            if (match.AcceptOrNot == true)
                            {
                                <option value="@match.Id">@match.FirstPerson.FirstName @match.FirstPerson.LastName, @match.SecondPerson.FirstName @match.SecondPerson.LastName</option>
                            }
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => message.MatchId)" />
            </div>
        </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn-btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="messages" />
</EditForm>


@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Message message { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Match> Matchs;

    protected async override Task OnInitializedAsync()
    {
        Matchs = await _client.GetFromJsonAsync<List<Match>>($"{Endpoints.MatchsEndpoint}");
    }


}
