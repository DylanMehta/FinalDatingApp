@inject HttpClient _client

<EditForm Model="@media" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Photo:</label>
            <div>
                <InputText @bind-Value="@media.Photo" class="form-control" />
                <ValidationMessage For="@(() => media.Photo)" />
            </div>
        </div>
        <div class="form-group">
            <label>Person:</label>
            <div>
                <InputSelect @bind-Value="@media.PersonId" class="form-control">
                    <option value="">--Select Person</option>
                    @if (Persons != null)
                    {
                        foreach (var person in Persons)
                        {
                            <option value="@person.Id">@person.FirstName @person.LastName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => media.PersonId)" />
            </div>
        </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn-btn-success btn-block">
            @ButtonText
        </button>
    }

    <BackToList Target="medias" />
</EditForm>


@code {

    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Media media { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Person> Persons;

    protected async override Task OnInitializedAsync()
    {
        Persons = await _client.GetFromJsonAsync<List<Person>>($"{Endpoints.PersonsEndpoint}");
    }

}
