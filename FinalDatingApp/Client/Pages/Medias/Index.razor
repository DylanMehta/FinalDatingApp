@page "/medias/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3>Medias</h3>

@if (Medias == null)
{
    <div class="alert alert-info">Loading Medias...</div>
}
else
{ 
<table class="table table-responsive" id="bookingsTable">
    <thead>
        <tr>
            <th>Media Id</th>
            <th>Photo</th>
            <th>Name</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var Media in Medias)
        {
            <tr>
                <td>@Media.Id</td>
                <td>@Media.Photo</td>
                <td>@Media.Person.FirstName @Media.Person.LastName</td>
                <td>
                    <a href="/Bookings/view/@Media.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/Bookings/edit/@Media.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(Media.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
}

@code {
    private List<Media> Medias;

    protected async override Task OnInitializedAsync()
    {
        Medias = await _client.GetFromJsonAsync<List<Media>>($"{Endpoints.MediasEndpoint}");
    }

    async Task Delete(int mediaId)
    {
        var media = Medias.First(q => q.Id == mediaId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you sure you want to delete?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.MediasEndpoint}/{mediaId}");
            await OnInitializedAsync();
        }
    }
}
